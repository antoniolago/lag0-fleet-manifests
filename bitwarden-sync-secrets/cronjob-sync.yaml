# =============================================================================
# BITWARDEN OPERATOR SECRETS SYNC CRONJOB
# =============================================================================
#
# Copyright (c) 2024 lag0
# 
# MIT License
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# This CronJob automatically syncs secrets from Bitwarden/Vaultwarden collections
# to Kubernetes secrets, organized by namespaces using description tags.
#
# SETUP INSTRUCTIONS:
# ===================
#
# 1. BITWARDEN STRUCTURE:
#    Create a single collection in your Bitwarden vault (personal or organization):
#    - Collection: "bitwarden-sync-secrets" (or customize via ROOT_COLLECTION_NAME)
#    - Add namespace tags in secret descriptions: #namespace:production, #namespace:staging, etc.
#
# 2. SECRET TAGS FOR NAMESPACES:
#    Add namespace tags in secret descriptions to determine target namespace:
#    - Format: #namespace:production, #namespace:staging, etc.
#    - Example: "Database credentials #namespace:production"
#    - Example: "API Key for frontend and backend #namespace:frontend #namespace:backend"
#    - Secrets without namespace tags will be ignored
#
# 3. ENVIRONMENT VARIABLES:
#    - BW_URL: Your Vaultwarden instance URL
#    - BW_ORGANIZATION_ID: Your Bitwarden organization ID (optional - leave empty for personal collection)
#    - ROOT_COLLECTION_NAME: Root collection name (default: "bitwarden-sync-secrets")
#    - SECRET_NAME_PREFIX: Secret name prefix (default: "bitwarden-secrets")
#    - CREATE_NAMESPACES: Auto-create namespaces (default: "true")
#
# 4. REQUIRED SECRETS:
#    Create a secret named "bitwarden-secrets" with:
#    - vaultwarden-api-key-id: Your Vaultwarden API key ID
#    - vaultwarden-api-key-secret: Your Vaultwarden API key secret
#    - vaultwarden-admin-token: Your Vaultwarden admin token (as BW_PASSWORD)
#
# 5. DEPLOYMENT:
#    kubectl apply -k bitwarden-sync-secrets-secrets/
#
# 6. MONITORING:
#    kubectl get cronjobs -n bitwarden-sync-secrets
#    kubectl logs -n bitwarden-sync-secrets -l job-name=bitwarden-sync-<timestamp>
#
# =============================================================================

apiVersion: batch/v1
kind: CronJob
metadata:
  name: bitwarden-sync
  namespace: bitwarden-sync-secrets
  labels:
    app.kubernetes.io/name: bitwarden-sync
    app.kubernetes.io/part-of: bitwarden-sync-secrets
spec:
  schedule: "* * * * *"  # Run every minute
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  suspend: true
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: bitwarden-sync-sa
          containers:
          - name: bitwarden-sync
            image: ghcr.io/charlesthomas/bitwarden-cli:2025.6.1
            env:
            - name: BW_CLIENTID
              valueFrom:
                secretKeyRef:
                  name: bitwarden-secrets
                  key: vaultwarden-api-key-id
            - name: BW_CLIENTSECRET
              valueFrom:
                secretKeyRef:
                  name: bitwarden-secrets
                  key: vaultwarden-api-key-secret
            - name: BW_URL
              value: "https://vw.lag0.com.br"
            # - name: BW_ORGANIZATION_ID
            #   value: ""
            - name: ROOT_COLLECTION_NAME
              value: "bitwarden-sync-secrets"
            - name: SECRET_NAME_PREFIX
              value: "bitwarden-secrets"
            - name: SYNC_INTERVAL_MINUTES
              value: "1"
            - name: CREATE_NAMESPACES
              value: "true"
            
            command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              set -euo pipefail
              
              # Colors for output
              RED='\033[0;31m'
              GREEN='\033[0;32m'
              YELLOW='\033[1;33m'
              BLUE='\033[0;34m'
              NC='\033[0m'
              
              log_info() {
                echo -e "${BLUE}[INFO]${NC} $1"
              }
              
              log_success() {
                echo -e "${GREEN}[SUCCESS]${NC} $1"
              }
              
              log_warning() {
                echo -e "${YELLOW}[WARNING]${NC} $1"
              }
              
              log_error() {
                echo -e "${RED}[ERROR]${NC} $1"
              }
              
              # Set Vaultwarden URL
              export BW_URL="$BW_URL"
              
              # Login to Vaultwarden using API key
              log_info "Logging into Vaultwarden at $BW_URL..."
              bw login --apikey
              
              # Unlock the vault using admin token
              log_info "Unlocking Vaultwarden vault..."
              export BW_SESSION="$BW_PASSWORD"
              
                                            # Function to extract namespace from item description
               extract_namespace_from_item() {
                 local item="$1"
                 local namespace=""
                 
                 # Look for #namespace: tag in notes
                 if echo "$item" | jq -r '.notes // empty' | grep -q "#namespace:"; then
                   namespace=$(echo "$item" | jq -r '.notes // empty' | grep -o "#namespace:[^[:space:]]*" | sed 's/#namespace://')
                 fi
                 
                 echo "$namespace"
               }
               

               
               # Function to sync items to their respective namespaces
               sync_items_by_namespace() {
                 local collection_id="$1"
                 
                 log_info "Syncing items from collection $collection_id by namespace tags"
                 
                 # Get all items in the collection
                 local items=$(bw list items --collectionid "$collection_id")
                 
                 if [ -z "$items" ] || [ "$items" = "[]" ]; then
                   log_warning "No items found in collection $collection_id"
                   return
                 fi
                 
                 # Group items by namespace
                 declare -A namespace_items
                 
                 # Process each item
                 echo "$items" | jq -c '.[]' | while read -r item; do
                   local item_name=$(echo "$item" | jq -r '.name')
                   local namespace=$(extract_namespace_from_item "$item")
                   
                   if [ -n "$namespace" ] && [ "$namespace" != "null" ]; then
                     log_info "Found item '$item_name' for namespace '$namespace'"
                     
                     # Add item to namespace group
                     if [ -z "${namespace_items[$namespace]}" ]; then
                       namespace_items[$namespace]=""
                     fi
                     namespace_items[$namespace]+="$item"$'\n'
                   else
                     log_warning "Item '$item_name' has no namespace tag, skipping"
                   fi
                 done
                 
                 # Process each namespace
                 for namespace in "${!namespace_items[@]}"; do
                   log_info "Processing namespace: $namespace"
                   
                   # Create namespace if enabled
                   if [ "$CREATE_NAMESPACES" = "true" ]; then
                     kubectl create namespace "$namespace" --dry-run=client -o yaml | kubectl apply -f -
                   fi
                   
                   # Create temporary directory for secret data
                   local temp_dir=$(mktemp -d)
                   
                   # Extract secret data from items in this namespace
                   echo "${namespace_items[$namespace]}" | jq -r '.[] | 
                     if .type == 1 then
                       # Login type
                       "\(.name): \(.login.password // "")"
                     elif .type == 2 then
                       # Secure note type
                       "\(.name): \(.notes // "")"
                     elif .type == 3 then
                       # Card type
                       "\(.name): \(.card.number // "")"
                     elif .type == 4 then
                       # Identity type
                       "\(.name): \(.identity.ssn // "")"
                     else
                       # Default to notes
                       "\(.name): \(.notes // "")"
                     end' > "$temp_dir/secrets.txt"
                   
                   # Create Kubernetes secret
                   kubectl create secret generic "$SECRET_NAME_PREFIX" \
                     --namespace="$namespace" \
                     --from-file="$temp_dir/secrets.txt" \
                     --dry-run=client -o yaml | \
                   kubectl apply -f -
                   

                   
                   # Clean up
                   rm -rf "$temp_dir"
                   
                   log_success "Successfully synced secrets to namespace $namespace"
                 done
               }
               
                               # Get the collection
                if [ -n "$BW_ORGANIZATION_ID" ]; then
                  log_info "Fetching Bitwarden organization collections..."
                  collections=$(bw list collections --organizationid "$BW_ORGANIZATION_ID")
                  
                  # Find the collection in organization
                  collection_id=$(echo "$collections" | jq -r ".[] | select(.name == \"$ROOT_COLLECTION_NAME\") | .id")
                  
                  if [ -z "$collection_id" ] || [ "$collection_id" = "null" ]; then
                    log_error "Collection '$ROOT_COLLECTION_NAME' not found in organization"
                    exit 1
                  fi
                  
                  log_info "Found organization collection: $collection_id"
                else
                  log_info "Fetching Bitwarden personal collections..."
                  collections=$(bw list collections)
                  
                  # Find the collection in personal vault
                  collection_id=$(echo "$collections" | jq -r ".[] | select(.name == \"$ROOT_COLLECTION_NAME\") | .id")
                  
                  if [ -z "$collection_id" ] || [ "$collection_id" = "null" ]; then
                    log_error "Collection '$ROOT_COLLECTION_NAME' not found in personal vault"
                    exit 1
                  fi
                  
                  log_info "Found personal collection: $collection_id"
                fi
               
               # Sync items by namespace tags
               sync_items_by_namespace "$collection_id"
              
              log_success "Bitwarden sync completed successfully"
            envFrom:
            - secretRef:
                name: bitwarden-secrets
          restartPolicy: OnFailure
          backoffLimit: 3 